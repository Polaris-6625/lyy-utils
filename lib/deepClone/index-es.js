const t={Array:Array.isArray,Date:t=>t instanceof Date,Set:t=>"[object Set]"===Object.prototype.toString.call(t),Map:t=>"[object Map]"===Object.prototype.toString.call(t),Object:t=>"[object Object]"===Object.prototype.toString.call(t),Symbol:t=>"[object Symbol]"===Object.prototype.toString.call(t),Function:t=>"[object Function]"===Object.prototype.toString.call(t)};function o(n,e=new WeakMap){if(t.Function(n))return/^function/.test(n.toString())||/^\(\)/.test(n.toString())?new Function("return "+n.toString())():new Function("return function "+n.toString())();if(t.Date(n))return new Date(n.valueOf());if(t.Symbol(n))return Symbol(n.description);if(t.Set(n)){const t=new Set;for(const r of n)t.add(o(r),e);return t}if(t.Map(n)){const t=new Map;for(const r of n)t.set(o(r[0],e),o(r[1],e));return t}if(e.has(n))return e.get(n);if(t.Array(n)){const t=[];for(const r in n)t[r]=o(n[r],e);return t}if(!t.Object(n))return n;const r=t.Array(n)?[]:{};e.set(n,r);for(const c in n)t.Array(n[c])&&o(n[c],e),e.set(n,r),r[c]=o(n[c],e);const c=Object.getOwnPropertySymbols(n);for(const t of c)r[t]=o(n[t],e);return r}export{o as deepClone};
